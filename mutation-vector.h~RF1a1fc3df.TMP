#pragma once

#include "mutationvectorized.h"

class MutationVector : public Mutation {
	protected:
		std::vector<MutationVectorized *> *mutationVector = NULL;

	public:
		void		mutate(Chromosome *chromosome);

};

inline void MutationVector::mutate(Chromosome *chromosome) {
	if (!mutationVector)
		return;
	
	size_t i = 0;

	std::vector<Gene *> *genes = chromosome->getGenes();
	for (std::vector<Gene *>::iterator it = genes->begin(); it != genes->end(); it++) {
		if (i >= mutationVector->size())
			return;
			
		(*mutationVector)[i];

		mutate(*it);

		i++;
	}
}